generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" 
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  password         String?
  fullName         String
  isAdmin          Boolean  @default(false)
  mobile           String?
  isEmailVerified  Boolean  @default(false)
  isMobileVerified Boolean  @default(false)
  userType         String?
  googleId         String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  students         Student[] // One-to-many relationship
}

model Student {
  id               Int      @id @default(autoincrement())
  userId           Int
  enrollmentNumber String
  course           String
  yearOfStudy      Int
  institution      String
  createdAt        DateTime @default(now())

  user             User     @relation(fields: [userId], references: [id]) // Define relation to User
}

model SocialMediaLink {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          Int      @id @default(autoincrement())
  days        String
  title       String
  date        String
  time        String
  location    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ExecutiveMember {
  id                 Int      @id @default(autoincrement())
  userId             Int
  jobTitle           String
  department         String
  yearsOfExperience  Int
  company            String
  createdAt         DateTime @default(now())

}

model Mission {
  id       Int      @id @default(autoincrement())
  mission  String   @db.VarChar(255) // Assuming a maximum length of 255 characters
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Otp {
  id        Int      @id @default(autoincrement())
  mail      String   @db.VarChar(255) // Assuming a maximum length for the email
  otp       String   @db.VarChar(10)  // Assuming a maximum length for the OTP
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([expiresAt]) // Create an index for expiration
}

model Query {
  id          String   @id @default(cuid())
  name        String
  mobile      String
  email       String
  companyName String?  @default("")
  workingArea String?  @default("")
  query       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model TransferPair {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user1Id       String   @db.ObjectId
  user2Id       String   @db.ObjectId
  transferDate  DateTime
  status        String

  user1         User     @relation("User1TransferPair", fields: [user1Id], references: [id])
  user2         User     @relation("User2TransferPair", fields: [user2Id], references: [id])
}
model AddTeams {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  image     String
  category  String
  phone     String
  email     String
  address   String
}
model AdminData {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  adminRole         String
  specialPermissions String[]
  otherData         Json?

  User              User     @relation(fields: [userId], references: [id])
}

model TransferRequest {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  subsidiary    String
  requestDate   DateTime @default(now())
  status        String

  User          User     @relation(fields: [userId], references: [id])
}
model TermsAndConditions {
  id        Int      @id @default(autoincrement())
  content   String
  validUpto DateTime
  address   String
}
model employeeIdCard {
  id             Int      @id @default(autoincrement())
  name           String
  userId         Int      // Assuming this is a foreign key to a User model, or another related table
  companyName    String
  contactNo      String
  address        String
  employeePhoto  String?   // Optional field (as in some cases, employee photo may be nullable)
  workingArea    String
  employeeIdNo   String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // If userId is related to a User model, you can set up a relation like this:
  // user User @relation(fields: [userId], references: [id])
}