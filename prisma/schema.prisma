generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" 
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  password         String?
  fullName         String
  isAdmin          Boolean  @default(false)
  mobile           String?
  isEmailVerified  Boolean  @default(false)
  isMobileVerified Boolean  @default(false)
  userType         String?
  googleId         String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  transferRequests TransferRequest[] 
  students         Student[] 
}
model TransferRequest {
  id                      Int      @id @default(autoincrement())
  userId                  Int
  user                    User     @relation(fields: [userId], references: [id])
  name                    String
  designation             String
  aideoaIdNo              String
  mobileNumber            String
  currentSubsidiary       String
  currentMinesName       String
  grade                   String
  preferredTransferSubsidiary String
  preferredTransferMine   String
  preferredTransferArea   String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}
model Student {
  id               Int      @id @default(autoincrement())
  userId           Int
  enrollmentNumber String
  course           String
  yearOfStudy      Int
  institution      String
  createdAt        DateTime @default(now())

  user             User     @relation(fields: [userId], references: [id]) // Define relation to User
}

model SocialMediaLink {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          Int      @id @default(autoincrement())
  days        String
  title       String
  date        String
  time        String
  location    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ExecutiveMember {
  id                 Int      @id @default(autoincrement())
  userId             Int
  jobTitle           String
  department         String
  yearsOfExperience  Int
  company            String
  createdAt         DateTime @default(now())

}

model Mission {
  id       Int      @id @default(autoincrement())
  mission  String   @db.VarChar(255) // Assuming a maximum length of 255 characters
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Otp {
  id        Int      @id @default(autoincrement())
  mail      String   @db.VarChar(255) // Assuming a maximum length for the email
  otp       String   @db.VarChar(10)  // Assuming a maximum length for the OTP
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([expiresAt]) // Create an index for expiration
}

model Query {
  id          String   @id @default(cuid())
  name        String
  mobile      String
  email       String
  companyName String?  @default("")
  workingArea String?  @default("")
  query       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

